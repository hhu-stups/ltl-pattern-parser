plugins {
	id("antlr")
	id("java-library")
	id("maven-publish")
	id("signing")
}

project.group = 'de.hhu.stups'
project.version = "0.2.3-SNAPSHOT"

final isSnapshot = project.version.endsWith("-SNAPSHOT")

repositories {
	mavenCentral()
	if (isSnapshot) {
		maven {
			name "snapshots"
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
}

// Prevent the full ANTLR tool (not just the runtime) being declared as a runtime dependency of our code.
// Workaround for https://github.com/gradle/gradle/issues/820
configurations {
	api {
		extendsFrom = extendsFrom.findAll {it != antlr}
	}
}

dependencies {
	def antlrVersion = "4.13.2"
	def parserVersion = "2.13.5"

	antlr group: "org.antlr", name: "antlr4", version: antlrVersion
	api group: "org.antlr", name: "antlr4-runtime", version: antlrVersion
	api group: "de.hhu.stups", name: "parserbase", version: parserVersion
	api group: "de.hhu.stups", name: "prologlib", version: parserVersion

	testImplementation group: "de.hhu.stups", name: "ltlparser", version: parserVersion
	testImplementation group: "junit", name: "junit", version: "4.13.2"
}

generateGrammarSource {
	arguments += ["-package", "de.prob.ltl.parser"]
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	withSourcesJar()
	withJavadocJar()
}

// Workaround for Gradle's antlr plugin not adding the necessary dependencies to sourcesJar and javadocJar,
// causing an error with Gradle 8 because of undeclared dependencies.
// See https://github.com/gradle/gradle/issues/19555 and https://github.com/gradle/gradle/issues/25885

sourcesJar {
	dependsOn("generateGrammarSource")
}

javadocJar {
	dependsOn("generateGrammarSource")
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name = 'LTL Pattern DSL Parser'
				description = 'Parser for a LTL Pattern DSL'
				url = 'https://gitlab.cs.uni-duesseldorf.de/stups/prob/ltl-pattern-parser'

				licenses {
					license {
						name = 'Eclipse Public License, Version 1.0'
						url = 'https://www.eclipse.org/legal/epl-v10.html'
					}
				}
				scm {
					connection = 'scm:git:git://gitlab.cs.uni-duesseldorf.de/stups/prob/ltl-pattern-parser.git'
					developerConnection = 'scm:git:git@gitlab.cs.uni-duesseldorf.de/stups/prob/ltl-pattern-parser.git'
					url = 'https://gitlab.cs.uni-duesseldorf.de/stups/prob/ltl-pattern-parser'
				}


				developers {
					developer {
						id = 'bendisposto'
						name = 'Jens Bendisposto'
						email = 'jens@bendisposto.de'
					}
				}
			}
		}
	}

	repositories {
		maven {
			final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
			url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
			if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
				credentials {
					username project.ossrhUsername
					password project.ossrhPassword
				}
			}
		}
	}
}

ext."signing.secretKeyRingFile" = rootProject.file("secring.gpg").absolutePath

signing {
	sign publishing.publications.mavenJava
}
